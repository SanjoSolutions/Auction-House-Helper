AuctionHouseHelperFullScanFrameMixin = {}

local FULL_SCAN_EVENTS = {
  "AUCTION_ITEM_LIST_UPDATE",
  "AUCTION_HOUSE_CLOSED",
}

function AuctionHouseHelperFullScanFrameMixin:OnLoad()
  AuctionHouseHelper.Debug.Message("AuctionHouseHelperFullScanFrameMixin:OnLoad")
  AuctionHouseHelper.EventBus:RegisterSource(self, "AuctionHouseHelperFullScanFrameMixin")
  self.state = AuctionHouseHelper.SavedState
end

function AuctionHouseHelperFullScanFrameMixin:ResetData()
  self.scanData = {}
  self.dbKeysMapping = {}
end

function AuctionHouseHelperFullScanFrameMixin:InitiateScan()
  if self:CanInitiate() then
    AuctionHouseHelper.EventBus:Fire(self, AuctionHouseHelper.FullScan.Events.ScanStart)

    self.state.TimeOfLastGetAllScan = time()

    self.inProgress = true

    self:RegisterForEvents()
    AuctionHouseHelper.Utilities.Message(AUCTION_HOUSE_HELPER_L_STARTING_FULL_SCAN)

    --Patch to prevent an error being generated by the classic AH code
    if not ITEM_QUALITY_COLORS[-1] then
      ITEM_QUALITY_COLORS[-1] = {r=0, b=0, g=0}
    end

    QueryAuctionItems("", nil, nil, 0, nil, nil, true, false, nil)
    -- 10% complete after making the replicate request
    AuctionHouseHelper.EventBus:Fire(self, AuctionHouseHelper.FullScan.Events.ScanProgress, 0.1)
  else
    AuctionHouseHelper.Utilities.Message(self:NextScanMessage())
  end
end

function AuctionHouseHelperFullScanFrameMixin:CanInitiate()
  local _, canDoGetAll = CanSendAuctionQuery()
  return canDoGetAll
end

function AuctionHouseHelperFullScanFrameMixin:NextScanMessage()
  local timeSinceLastScan = time() - (self.state.TimeOfLastGetAllScan or 0)
  local minutesUntilNextScan = 15 - math.ceil(timeSinceLastScan / 60)
  local secondsUntilNextScan = (15 * 60 - timeSinceLastScan) % 60

  return AUCTION_HOUSE_HELPER_L_NEXT_SCAN_MESSAGE:format(minutesUntilNextScan, secondsUntilNextScan)
end

function AuctionHouseHelperFullScanFrameMixin:RegisterForEvents()
  AuctionHouseHelper.Debug.Message("AuctionHouseHelperFullScanFrameMixin:RegisterForEvents()")

  FrameUtil.RegisterFrameForEvents(self, FULL_SCAN_EVENTS)
end

function AuctionHouseHelperFullScanFrameMixin:UnregisterForEvents()
  AuctionHouseHelper.Debug.Message("AuctionHouseHelperFullScanFrameMixin:UnregisterForEvents()")

  FrameUtil.UnregisterFrameForEvents(self, FULL_SCAN_EVENTS)
end

function AuctionHouseHelperFullScanFrameMixin:CacheScanData()
  -- 20% complete after server response
  AuctionHouseHelper.EventBus:Fire(self, AuctionHouseHelper.FullScan.Events.ScanProgress, 0.2)

  self:ResetData()
  self.waitingForData = GetNumAuctionItems("list")

  self:ProcessBatch(
    0,
    250,
    self.waitingForData
  )
end

function AuctionHouseHelperFullScanFrameMixin:ProcessBatch(startIndex, stepSize, limit)
  if startIndex >= limit then
    return
  end

  -- 20-100% complete when 0-100% through caching the scan
  AuctionHouseHelper.EventBus:Fire(self,
    AuctionHouseHelper.FullScan.Events.ScanProgress,
    0.2 + startIndex/limit*0.8
  )

  AuctionHouseHelper.Debug.Message("AuctionHouseHelperFullScanFrameMixin:ProcessBatch (links)", startIndex, stepSize, limit)

  local i = startIndex
  while i < startIndex+stepSize and i < limit do
    local info = { GetAuctionItemInfo("list", i) }
    local link = GetAuctionItemLink("list", i)
    local itemID = info[17]

    if itemID == 0 then
      self.waitingForData = self.waitingForData - 1
    elseif not link then
      local item = Item:CreateFromItemID(itemID)
      item:ContinueOnItemLoad((function(index)
        return function()
          -- Don't do anything when the AH window has been closed
          if not self.inProgress then
            return
          end

          local link = GetAuctionItemLink("list", index)

          AuctionHouseHelper.Utilities.DBKeyFromLink(link, function(dbKeys)
            self.waitingForData = self.waitingForData - 1

            table.insert(self.scanData, {
              auctionInfo = { GetAuctionItemInfo("list", index) },
              itemLink      = link,
            })
            table.insert(self.dbKeysMapping, dbKeys)

            if self.waitingForData == 0 then
              self:EndProcessing()
            end
          end)
        end
      end)(i))
    else
      AuctionHouseHelper.Utilities.DBKeyFromLink(link, function(dbKeys)
        self.waitingForData = self.waitingForData - 1
        table.insert(self.scanData, {
          auctionInfo = info,
          itemLink      = link,
        })
        table.insert(self.dbKeysMapping, dbKeys)

        if self.waitingForData == 0 then
          self:EndProcessing()
        end
      end)
    end

    i = i + 1
  end

  if self.waitingForData == 0 and self.inProgress then
    self:EndProcessing()
  end

  C_Timer.After(0.01, function()
    self:ProcessBatch(startIndex + stepSize, stepSize, limit)
  end)
end

function AuctionHouseHelperFullScanFrameMixin:OnEvent(event, ...)
  if event == "AUCTION_ITEM_LIST_UPDATE" then
    AuctionHouseHelper.Debug.Message(event)

    FrameUtil.UnregisterFrameForEvents(self, { "AUCTION_ITEM_LIST_UPDATE" })
    self:CacheScanData()
  elseif event =="AUCTION_HOUSE_CLOSED" then
    self:UnregisterForEvents()

    if self.inProgress then
      self.inProgress = false
      self:ResetData()

      AuctionHouseHelper.Utilities.Message(
        AUCTION_HOUSE_HELPER_L_FULL_SCAN_FAILED .. " " .. self:NextScanMessage()
      )
      AuctionHouseHelper.EventBus:Fire(self, AuctionHouseHelper.FullScan.Events.ScanFailed)
    end
  end
end

local function GetInfo(auctionInfo)
  local available = auctionInfo[3]
  local buyoutPrice = auctionInfo[10]
  local effectivePrice = buyoutPrice / available
    
  return math.ceil(effectivePrice), available
end


local function MergeInfo(scanData, dbKeysMapping)
  local allInfo = {}
  local index = 0

  for index = 1, #scanData do
    local effectivePrice, available = GetInfo(scanData[index].auctionInfo)

    -- available > 0 check just in case Blizzard returns 0 available it
    -- occasionally does on retail and breaking the effectivePrice from GetInfo
    if available > 0 and effectivePrice ~= 0 then
      for _, dbKey in ipairs(dbKeysMapping[index]) do
        if allInfo[dbKey] == nil then
          allInfo[dbKey] = {}
        end

        table.insert(allInfo[dbKey],
          { price = effectivePrice, available = available }
        )
      end
    end
  end

  return allInfo
end

function AuctionHouseHelperFullScanFrameMixin:EndProcessing()
  local rawFullScan = self.scanData

  local count = AuctionHouseHelper.Database:ProcessScan(MergeInfo(self.scanData, self.dbKeysMapping))
  AuctionHouseHelper.Utilities.Message(AUCTION_HOUSE_HELPER_L_FINISHED_PROCESSING:format(count))

  self.inProgress = false
  self:ResetData()

  self:UnregisterForEvents()

  AuctionHouseHelper.EventBus:Fire(self, AuctionHouseHelper.FullScan.Events.ScanComplete, rawFullScan)
end
